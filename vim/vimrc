runtime! plugins.vim
runtime! settings.vim

"
"--- PLUGIN CONFIGURATIONS
"

" colorscheme + powerline + airline
let g:airline_powerline_fonts=1

" gruvbox
let g:gruvbox_italic=1
let g:gruvbox_hls_cursor="blue"
let g:gruvbox_number_column="bg1"
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_vert_split="bg4"
let g:gruvbox_color_column="bg4"
let g:gruvbox_guisp_fallback = "fg"
" Delete pipe characters on styling vertical split borders
set fillchars+=vert:\
colorscheme gruvbox
set background=dark

" Try to fix gruvbox color scheme for diffs
highlight! DiffDelete guifg=lightred ctermfg=lightred guibg=#32302f ctermbg=243 gui=inverse cterm=inverse
highlight! DiffAdd guifg=lightgreen ctermfg=lightgreen guibg=#32302f ctermbg=167 gui=inverse cterm=inverse
highlight! DiffChange guifg=gray ctermfg=gray guibg=#1d2021 ctermbg=229 gui=inverse cterm=inverse
highlight! DiffText guifg=lightblue ctermfg=136 guibg=#1d2021 ctermbg=229 gui=bold,inverse cterm=bold,inverse

" diff colorscheme: vim-colors-github
" set background=light
" use a slightly darker background, like GitHub inline code blocks
let g:github_colors_soft = 1
" more blocky diff markers in signcolumn (e.g. GitGutter)
let g:github_colors_block_diffmark = 0
" let g:airline_theme = "github"
" colorscheme github
" if &diff
"   colorscheme github
" endif


" pymode plugin
" let g:pymode_python = 'python3'
let g:pymode_options_max_line_length = 120
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_doc = 0
let g:pymode_lint = 0
let g:pymode_lint_checkers = ['pyflakes', 'mccabe']
let g:pymode_lint_ignore = "E731"
let g:pymode_lint_write = 0  " Auto check on save
let g:pymode_virtualenv = 0  " Support virtualenv
let g:pymode_breakpoint = 1  " Enable breakpoints plugin
let g:pymode_breakpoint_key = '<leader>b'
let g:pymode_breakpoint_cmd = 'import pudb; pudb.set_trace()  # BREAKPOINT'
let g:pymode_syntax = 1  " syntax highlighting
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_folding = 0  " Don't autofold code

" remote debugging with pudb
nmap <leader>rr Ofrom pudb.remote import set_trace; set_trace(term_size=(160, 48), host='0.0.0.0', port=6899)  # BREAKPOINT<esc>^

" Tabular
vmap <leader>t :Tabularize /


" coc.nvim
let g:coc_global_extensions = ['coc-json', 'coc-python', 'coc-sh', 'coc-rust-analyzer', 'coc-clangd', 'coc-yaml', 'coc-groovy', 'coc-toml', 'coc-docker']
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>y <Plug>(coc-type-definition)
nmap <silent> <leader>m <Plug>(coc-implementation)
nmap <silent> <leader>n <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Move beteen "errors"
nmap <silent> ]e <Plug>(coc-diagnostic-prev)
nmap <silent> [e <Plug>(coc-diagnostic-next)

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" " Map function and class text objects
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" omap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap af <Plug>(coc-funcobj-a)
" xmap ic <Plug>(coc-classobj-i)
" omap ic <Plug>(coc-classobj-i)
" xmap ac <Plug>(coc-classobj-a)
" omap ac <Plug>(coc-classobj-a)


" fzf.vim
" see also entries in .zshrc where the fzf command is configured
nnoremap <c-p> :Files<cr>
" Using "Rg" feature of FZF
"start a search query by pressing \
nnoremap \ :Rg<cr>


"
"-- KEY MAPPINGS
"

" quite a window
nnoremap <leader>q :q<cr>

" save current buffer (<C-s> gives problems in a normal linux terminal)
nnoremap <leader>w :w!<cr>

" " yank to system clipboard
" nnoremap <leader>y "+y
" " paste from system clipboard
" nmap <leader>p "+p

" " Neat X clipboard integration
" " ,p will paste clipboard into buffer
" " ,c will copy entire buffer into clipboard
" noremap <leader>p :read !xsel --clipboard --output<cr>
" noremap <leader>c :w !xsel -ib<cr><cr>


" make Y behave like C or D
nmap Y y$

" when searching center the search result in center of screen
nmap n nzz
nmap N Nzz

" insert a linebreak
nmap <leader>l i<cr><esc>

" treat long lines as break lines
map j gj
map k gk

" easier way to move between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" inoremap <C-h> <C-\><C-N><C-w>h
" inoremap <C-j> <C-\><C-N><C-w>j
" inoremap <C-k> <C-\><C-N><C-w>k
" inoremap <C-l> <C-\><C-N><C-w>l

" and in teminal mode:
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
tnoremap <Esc> <C-\><C-n>

" Blatantly stolen from https://github.com/tpope/vim-unimpaired/blob/master/plugin/unimpaired.vim

if exists("g:loaded_key_mappings") || &cp || v:version < 700
    finish
endif
let g:loaded_key_mappings = 1

" Next and previous

function! s:MapNextFamily(map,cmd)
    let map = '<Plug>unimpaired'.toupper(a:map)
    let cmd = '".(v:count ? v:count : "")."'.a:cmd
    let end = '"<CR>'.(a:cmd == 'l' || a:cmd == 'c' ? 'zv' : '')
    execute 'nnoremap <silent> '.map.'Previous :<C-U>exe "'.cmd.'previous'.end
    execute 'nnoremap <silent> '.map.'Next     :<C-U>exe "'.cmd.'next'.end
    execute 'nnoremap <silent> '.map.'First    :<C-U>exe "'.cmd.'first'.end
    execute 'nnoremap <silent> '.map.'Last     :<C-U>exe "'.cmd.'last'.end
    execute 'nmap <silent> ['.        a:map .' '.map.'Previous'
    execute 'nmap <silent> ]'.        a:map .' '.map.'Next'
    execute 'nmap <silent> ['.toupper(a:map).' '.map.'First'
    execute 'nmap <silent> ]'.toupper(a:map).' '.map.'Last'
    if exists(':'.a:cmd.'nfile')
        execute 'nnoremap <silent> '.map.'PFile :<C-U>exe "'.cmd.'pfile'.end
        execute 'nnoremap <silent> '.map.'NFile :<C-U>exe "'.cmd.'nfile'.end
        execute 'nmap <silent> [<C-'.a:map.'> '.map.'PFile'
        execute 'nmap <silent> ]<C-'.a:map.'> '.map.'NFile'
    endif
endfunction

" call s:MapNextFamily('a','')  " argument list
call s:MapNextFamily('b','b')  " buffer list
call s:MapNextFamily('l','l')  " local list
call s:MapNextFamily('q','c')  " quickfix list
call s:MapNextFamily('t','t')  " tag stack


" => Nifty trick found at https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
" select some text -> replace with "p" without overwritting the paste buffer!
" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Define `Reverse`: reverses the order of the lines selected
command! -bar -range=% Reverse <line1>,<line2>global/^/m<line1>-1

" From https://vim.fandom.com/wiki/Pretty-formatting_XML
command! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"
command! FormatJson :%!python3 -m json.tool
